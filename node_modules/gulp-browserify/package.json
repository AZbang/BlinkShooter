{
  "_args": [
    [
      "gulp-browserify@https://github.com/deepak1556/gulp-browserify/tarball/master",
      "C:\\Users\\wrg\\Desktop\\ShooterBlink"
    ]
  ],
  "_from": "https://github.com/deepak1556/gulp-browserify/tarball/master",
  "_id": "gulp-browserify@0.5.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/gulp-browserify",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "0.0.1",
    "object-keys": "0.4.0",
    "string_decoder": "0.10.31"
  },
  "_requested": {
    "name": "gulp-browserify",
    "raw": "gulp-browserify@https://github.com/deepak1556/gulp-browserify/tarball/master",
    "rawSpec": "https://github.com/deepak1556/gulp-browserify/tarball/master",
    "scope": null,
    "spec": "https://github.com/deepak1556/gulp-browserify/tarball/master",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://github.com/deepak1556/gulp-browserify/tarball/master",
  "_shasum": "42bf2e344ab87c5ca14cf18567091ce21e6b6171",
  "_shrinkwrap": null,
  "_spec": "gulp-browserify@https://github.com/deepak1556/gulp-browserify/tarball/master",
  "_where": "C:\\Users\\wrg\\Desktop\\ShooterBlink",
  "author": {
    "email": "hop2deep@gmail.com",
    "name": "Robo"
  },
  "bugs": {
    "url": "https://github.com/deepak1556/gulp-browserify/issues"
  },
  "contributors": [
    {
      "email": "hop2deep@gmail.com",
      "name": "Robo"
    },
    {
      "email": "me@slacy.me",
      "name": "Steve Lacy"
    },
    {
      "email": "shuhei.kagawa@gmail.com",
      "name": "Shuhei Kagawa"
    }
  ],
  "dependencies": {
    "browserify": "3.x",
    "browserify-shim": "~2.0.10",
    "gulp-util": "~2.2.5",
    "readable-stream": "~1.1.10",
    "through2": "~0.4.0"
  },
  "description": "Bundle modules with Browserify",
  "devDependencies": {
    "chai": "~1.9.0",
    "coffeeify": "~0.6.0",
    "mocha": "~1.17.1"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "homepage": "https://github.com/deepak1556/gulp-browserify#readme",
  "keywords": [
    "gulpplugin",
    "gulpfriendly",
    "browserify"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "gulp-browserify",
  "optionalDependencies": {},
  "readme": "## NOTE: THIS PLUGIN IS NO LONGER MAINTAINED , checkout the [recipes](https://github.com/gulpjs/gulp/tree/master/docs/recipes) by gulp team for reference on using browserify with gulp.\n\n[![Build Status](https://travis-ci.org/deepak1556/gulp-browserify.png)](https://travis-ci.org/deepak1556/gulp-browserify)\n[![NPM version](https://badge.fury.io/js/gulp-browserify.png)](http://badge.fury.io/js/gulp-browserify)\n\n# [gulp](https://github.com/gulpjs/gulp)-browserify\n\n<table>\n<tr>\n<td>Package</td><td>gulp-browserify</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>Bundle modules with BrowserifyJS</td>\n</tr>\n<tr>\n<td>Node Version</td>\n<td>>= 0.9</td>\n</tr>\n<tr>\n<td>Gulp Version</td>\n<td>3.x</td>\n\n</tr>\n</table>\n\n# Usage\n\n\n## Install\n\n```\nnpm install --save-dev gulp-browserify\n```\n\n## Example\n\n```javascript\nvar gulp = require('gulp');\nvar browserify = require('gulp-browserify');\n\n// Basic usage\ngulp.task('scripts', function() {\n\t// Single entry point to browserify\n\tgulp.src('src/js/app.js')\n\t\t.pipe(browserify({\n\t\t  insertGlobals : true,\n\t\t  debug : !gulp.env.production\n\t\t}))\n\t\t.pipe(gulp.dest('./build/js'))\n});\n```\n\nMake sure to pipe *only entry points*. Browserify will take care of other dependencies for you.\n\n### Options\n\n#### transform\n\nType : `[String || function]`\n\nSpecifies a pipeline of functions (or module names) through which the browserified bundle will be run. Check out [the list of transforms on node-browserify](https://github.com/substack/node-browserify#list-of-source-transforms).\n\n##### Languages that compile to JavaScript\n\nIf you want to bundle files with extensions other than `.js` or `.json`, omit contents from streamed files and set `extensions` option.\n\nLet's say you want to browserify CoffeeScript, install `coffeeify` and:\n\n```javascript\nvar gulp = require('gulp');\nvar browserify = require('gulp-browserify');\nvar rename = require('gulp-rename');\n\ngulp.task('coffee', function() {\n  gulp.src('src/coffee/app.coffee', { read: false })\n    .pipe(browserify({\n      transform: ['coffeeify'],\n      extensions: ['.coffee']\n    }))\n    .pipe(rename('app.js'))\n    .pipe(gulp.dest('./build/js'))\n});\n```\n\nIf you forget `{ read: false }`, gulp-browserify will passes the contents stream of a incoming file to node-browserify. Then node-browserify names the stream as `fake_xxx.js` and process it. Some transforms such as `coffeeify` determines whether to transform files with extensions. That is why you need `{ read: false }` for AltJS.\n\n#### debug\n\nType : `Boolean`\n\nEnable source map support. `!gulp.env.production` would work well.\n\n#### extensions\n\nType: `[String]`\n\nArray of extensions that you want to skip in `require()` calls in addition to `.js` and `.json`. Don't forget `.`.\n\nWith `{ extensions: ['.coffee'] }`, you can't do `require('app')`. Instead, you have to do `require('app.coffee')`.\n\n#### ignore\nType: `[String]`\n\nArray of paths which should be passed to the ignore function of\nbrowserify.\n\n#### resolve\n\nType: `Function`\n\nCustom module name resolution function. From [node-browserify](https://github.com/substack/node-browserify#var-b--browserifyfiles-or-opts) documentation:\n> You can give browserify a custom `opts.resolve()` function or by default it uses\n[`browser-resolve`](https://npmjs.org/package/browser-resolve).\n\nObviously, this function must implement the same API as [browser-resolve](https://npmjs.org/package/browser-resolve).\n\n#### Other Options\n\nAny other options you provide will be passed through to browserify. This is useful for setting things like `standalone` or `ignoreGlobals`.\n\n### Custom options\n\n#### nobuiltins\n\nRemove builtins modules defined in `lib/builtins.js` (browserify module).\n`opts.builtins` must be not defined and `opts.nobuiltins` can be an Array of\nStrings or simply a String.\n\n```js\ngulp.task('scripts', function() {\n  gulp.src(['src/index.js'])\n    .pipe(browserify({\n      nobuiltins: 'events querystring'\n    }))\n    .pipe(gulp.dest('./build/js'))\n});\n```\n\n### Browserify-Shim\n\nExample configuration\n\n```javascript\ngulp.task('scripts', function() {\n\t//single entry point to browserify\n\tgulp.src(['src/index.js'])\n\t\t.pipe(browserify({\n\t\t  shim: {\n\t\t    angular: {\n                path: '/vendor/angular/angular.js',\n                exports: 'angular'\n\t\t    },\n            'angular-route': {\n                path: '/vendor/angular-route/angular-route.js',\n                exports: 'ngRoute',\n                depends: {\n                    angular: 'angular'\n                }\n            }\n\t\t  }\n\t\t}))\n\t\t.pipe(concat('dest.js'))\n\t\t.pipe(gulp.dest('./build'))\n});\n```\nMore information about configuring browserify-shim can be found [here](https://github.com/thlorenz/browserify-shim/blob/97d416cb3bc2ef531fae05a8eed4c86700ba4dc8/README.md).\n\n### Events\n\nOther than standard Node.js stream events, gulp-browserify emits its own events.\n\n#### prebundle\n\n```javascript\n.on('prebundle', function(bundler){})\n```\n\nEvent triggered just before invoking `bundler.bundle()` and provides the bundler object to work with in the callback.\n\nThis is especially useful if you want to `require()`, `external()` or other methods of node-browserify.\n\n```javascript\ngulp.task('scripts', function() {\n  gulp.src('src/js/app.js')\n    .pipe(browserify({\n      insertGlobals : true,\n      debug : !gulp.env.production\n    }))\n    .on('prebundle', function(bundle) {\n      bundle.external('domready');\n      bundle.external('react');\n    })\n    .pipe(gulp.dest('./build/js'))\n});\n```\n\n#### postbundle\n\n```javascript\n.on('postbundle', function(src){})\n```\n\nEvent triggered after the bundle process is over and provides the bundled data as an argument to the callback.\n\n\n\n# License\n\nCopyright (c) 2014 Robo (deepak1556) https://github.com/deepak1556\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/deepak1556/gulp-browserify.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.5.1"
}
